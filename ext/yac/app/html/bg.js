// Generated by LiveScript 1.2.0
(function(){
  var _, addMap, addQR, addTable, BG, out$ = typeof exports != 'undefined' && exports || this;
  _ = require('prelude-ls');
  addMap = function(sel){
    return sel.append('image').attr('xlink:href', 'map.png').attr('width', width).attr('height', height).attr('x', -25);
  };
  addQR = function(sel){
    var s, margin;
    s = Config.qrSize;
    margin = 10;
    sel.append('foreignObject').attr('id', 'qr').attr('width', s).attr('height', s).attr('x', width - s - margin).attr('y', height - s - margin);
    return new QRCode('qr', {
      text: Config.qrText,
      width: s,
      height: s,
      colorLight: 'transparent',
      colorDark: 'grey'
    });
  };
  addTable = function(sel){
    var ref$, w, h, e, t, c, x, y, i$, len$, ref1$, a, b, v, tr, results$ = [];
    ref$ = [92, 160], w = ref$[0], h = ref$[1];
    e = sel.append('foreignObject').classed('table', true).classed('btn', true).attr('width', w).attr('height', h).attr('x', width - w - 30).attr('y', 0.1 * height);
    t = e.append('xhtml:table');
    c = _.concat(
    _.concat(
    [(function(){
      var i$, ref$, len$, lresult$, j$, ref1$, len1$, results$ = [];
      for (i$ = 0, len$ = (ref$ = compNames).length; i$ < len$; ++i$) {
        x = ref$[i$];
        lresult$ = [];
        for (j$ = 0, len1$ = (ref1$ = compNames).length; j$ < len1$; ++j$) {
          y = ref1$[j$];
          if (x !== y) {
            lresult$.push([[x, y], fn$(pathNodes(x, y))]);
          }
        }
        results$.push(lresult$);
      }
      return results$;
      function fn$(it){
        return it.length;
      }
    }())]));
    for (i$ = 0, len$ = c.length; i$ < len$; ++i$) {
      ref$ = c[i$], ref1$ = ref$[0], a = ref1$[0], b = ref1$[1], v = ref$[1];
      tr = t.append('tr');
      (fn$.call(this, tr.append('th')));
      tr.append('td').text('·');
      results$.push(tr.append('td').text(v));
    }
    return results$;
    function fn$(th){
      (function(add){
        add(a);
        th.append('span').text('–');
        add(b);
      }.call(this, function(s){
        return (function(c){
          return th.append('span').text(_.take(1, c.name)).style('color', c.color);
        }.call(this, computersByName[s]));
      }));
    }
  };
  out$.BG = BG = {
    addMap: addMap,
    addQR: addQR,
    addTable: addTable
  };
}).call(this);
